{"version":3,"sources":["Snake/Snake.js","App.js","reportWebVitals.js","index.js"],"names":["Snake","props","width","useState","dim","setDim","chunk","setChunk","direction","setDirection","fruit","setFruit","points","setPoints","game","setGame","speedRef","useRef","part","snake","setSnake","turn","useCallback","dir","opp","tempSnake","console","log","length","unshift","useEffect","window","innerWidth","sneak","firstSection","y","current","Math","floor","random","totalArr","k","head","filter","item","handleKeydown","e","code","preventDefault","document","addEventListener","interval","setInterval","dupSneak","i","next","shift","push","pop","map","section","x","clearInterval","removeEventListener","className","id","style","height","backgroundColor","arr","addToArr","j","indexOf","pieces","piece","snakeColor","fruitColor","onClick","color","margin","App","Navbar","bg","variant","Container","Brand","href","alt","src","dark","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1bddc9c4.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport './Snake.css';\r\n\r\nconst Snake = (props) => {\r\n    const [dim, setDim] = useState(0);\r\n    const [chunk, setChunk] = useState(0);\r\n    const [direction, setDirection] = useState('right');\r\n    const [fruit, setFruit] = useState(26);\r\n    const [points, setPoints] = useState(0);\r\n    const [game, setGame] = useState(false);\r\n    const speedRef = useRef(100);\r\n    let width;\r\n    const [snake, setSnake] = useState([\r\n        {\r\n            direction: 'right', \r\n            part: [186, 185, 184, 183]\r\n        }\r\n    ]);\r\n\r\n    const reset = () => {\r\n        speedRef.current = 100;\r\n        setPoints(0)\r\n        setDirection('right')\r\n        setSnake ([{\r\n            direction: 'right', \r\n            part: [186, 185, 184, 183]\r\n        }])\r\n        setGame(false)\r\n    }\r\n\r\n    const pieces = () => {//functionally label snake pieces (bang) and return\r\n        let arr = [];\r\n        for (let i = 0; i < 400; i++) {\r\n            let addToArr = false;\r\n            let j = 0;\r\n            while (j < snake.length) {\r\n                if (snake[j].part.indexOf(i) >= 0) {\r\n                    addToArr = true\r\n                    break;\r\n                 } else {\r\n                    addToArr = false\r\n                 }\r\n                j++\r\n            }\r\n            addToArr ? \r\n                arr.push('bang') : \r\n                    i === fruit ? arr.push('fruit') :\r\n                        arr.push('')\r\n        }\r\n        return arr\r\n    }\r\n\r\n    //handle direction changes\r\n    const turn = useCallback(\r\n        (dir, opp) => {\r\n            let tempSnake = [...snake];\r\n            console.log(snake[0].part)\r\n            if (snake[0].part.length > 0 && direction !== opp && direction !== dir) {\r\n                setDirection(dir)\r\n                tempSnake.unshift({\r\n                    direction: dir,\r\n                    part: []\r\n                })\r\n                setSnake(tempSnake)\r\n            }\r\n        }, [snake, direction]\r\n    )\r\n\r\n    useEffect(() => {\r\n        //determine relative dimensions of game portal\r\n        width = window.innerWidth;\r\n        if (width >= 800) {\r\n            setDim(width * .35)\r\n        } else if (width < 800) {\r\n            setDim(width * .9);\r\n        }\r\n        setChunk(dim / 20)\r\n\r\n        //points and get longer after eating\r\n        if (snake[0].part[0] === fruit) {\r\n            setPoints(points + 1)\r\n            let sneak = [...snake];\r\n            let firstSection = sneak[0]\r\n            if (firstSection.direction === 'up') {\r\n                let y = firstSection.part[0] - 20;\r\n                if (y < 0) {\r\n                    firstSection.part.unshift(y + 400);\r\n                } else {\r\n                    firstSection.part.unshift(y)\r\n                }\r\n            } else if (firstSection.direction === 'right') {\r\n                let y = firstSection.part[0] + 1;\r\n                if (y % 20 === 0) {\r\n                    firstSection.part.unshift(y + - 20);\r\n                } else {\r\n                    firstSection.part.unshift(y)\r\n                }\r\n            } else if (firstSection.direction === 'down') {\r\n                let y = firstSection.part[0] + 20;\r\n                if (y >= 400) {\r\n                    firstSection.part.unshift(y - 400);\r\n                } else {\r\n                    firstSection.part.unshift(y)\r\n                }\r\n            } else if (firstSection.direction === 'left') {\r\n                let y = firstSection.part[0] - 1;\r\n                if (y % 20 === 19) {\r\n                    firstSection.part.unshift(y + 20);\r\n                } else {\r\n                    firstSection.part.unshift(y)\r\n                }\r\n            }\r\n            speedRef.current = speedRef.current - 2\r\n            setSnake(sneak)\r\n            setFruit(Math.floor(Math.random() * Math.floor(400)))\r\n        }\r\n\r\n        //gameover if you eat your tail\r\n        let totalArr = [];\r\n        for (let k = 0; k < snake.length; k++) {\r\n            totalArr = [...totalArr, ...snake[k].part]\r\n        }\r\n        let head = snake[0].part[0];\r\n        totalArr.filter(item => item === head).length >= 2 && setGame(true)\r\n\r\n        if (!game) {//if GAMEOVER pause events\r\n\r\n            //listen for directions and update snake instructions accordingly\r\n            const handleKeydown = (e) => {\r\n                //let tempSnake: any = [...snake];\r\n                switch (e.code) {\r\n                    case 'ArrowUp':\r\n                        e.preventDefault();\r\n                        turn('up', 'down')\r\n                        break;\r\n                    case 'ArrowRight':\r\n                        e.preventDefault();\r\n                        turn('right', 'left')\r\n                        break;\r\n                    case 'ArrowDown':\r\n                        e.preventDefault();\r\n                        turn('down', 'up')\r\n                        break;\r\n                    case 'ArrowLeft':\r\n                        e.preventDefault();\r\n                        turn('left', 'right')\r\n                        break;\r\n                    default:\r\n                }\r\n            }\r\n            document.addEventListener('keydown', handleKeydown)\r\n\r\n            //event interval\r\n            const interval = setInterval(() => {\r\n\r\n                //handle snake piece movement\r\n                let dupSneak = [...snake];\r\n\r\n                for (let i = (snake.length - 1); i > 0; i--) {//increment through current snake and reduce to head direction\r\n                    if (dupSneak[i].part.length !== 0) {\r\n                        let next = dupSneak[i - 1];\r\n                        let chunk = dupSneak[i].part.shift();\r\n                        next.part.push(chunk)\r\n                    } else {\r\n                        dupSneak.pop()\r\n                    }\r\n                }\r\n\r\n                //perform movement changes to each chunk\r\n                let sneak = dupSneak;\r\n                sneak.map((section) => {\r\n                    if (section.direction === 'right') {\r\n                        section.part.map((x, i) => {\r\n                            let y = x + 1;\r\n                            if (y % 20 === 0) {\r\n                                return section.part[i] = y - 20;\r\n                            } else {\r\n                                return section.part[i] = y\r\n                            }\r\n                        })\r\n                    } else if (section.direction === 'up') {\r\n                        section.part.map((x, i) => {\r\n                            let y = x - 20;\r\n                            if (y < 0) {\r\n                                return section.part[i] = y + 400;\r\n                            } else {\r\n                                return section.part[i] = y\r\n                            }\r\n                        })\r\n                    } else if (section.direction === 'left') {\r\n                        section.part.map((x, i) => {\r\n                            let y = x - 1;\r\n                            if (y % 20 === 19) {\r\n                                return section.part[i] = y + 20;\r\n                            } else {\r\n                                return section.part[i] = y\r\n                            }\r\n                        })\r\n                    } else if (section.direction === 'down') {\r\n                        section.part.map((x, i) => {\r\n                            let y = x + 20;\r\n                            if (y >= 400) {\r\n                                return section.part[i] = y - 400;\r\n                            } else {\r\n                                return section.part[i] = y\r\n                            }\r\n                        })\r\n                    }\r\n                    return ''\r\n                })\r\n                setSnake(sneak)\r\n\r\n            }, speedRef.current);\r\n\r\n            //remove interval and listeners\r\n            return () => {\r\n                clearInterval(interval)\r\n                document.removeEventListener('keydown', handleKeydown)\r\n            };\r\n        }\r\n    }, [turn, width, dim, chunk, snake, direction, points, fruit, game])\r\n\r\n    return (\r\n        <div className=\"snake-container\" id=\"snake-container\">\r\n            <div   \r\n                className=\"game-border\"\r\n                style={{width: dim, height: dim, backgroundColor: props.backgroundColor}}\r\n                >\r\n                    {\r\n                        pieces().map((piece, i) => {\r\n                            return <div\r\n                                key={'piece' + i}\r\n                                style={piece === 'bang' ? \r\n                                        {width: chunk, height: chunk, backgroundColor: props.snakeColor} : \r\n                                            piece === 'fruit' ?\r\n                                                {width: chunk, height: chunk, backgroundColor: props.fruitColor} :\r\n                                                    {width: chunk, height: chunk}}\r\n                                >\r\n                            </div>\r\n                        })\r\n                    }\r\n                    {\r\n                        game && <div \r\n                            className=\"game-splash\"\r\n                            style={{height: dim}}\r\n                            >\r\n                            <div>Game Over!</div>\r\n                            <button\r\n                                onClick={() => reset()}\r\n                                >\r\n                                    Play Again\r\n                            </button>\r\n                        </div>\r\n                    }\r\n            </div>\r\n            <div \r\n                className=\"point-bar\"\r\n                style={{width: dim}}\r\n                >\r\n                    <div style={{color: props.snakeColor}}>Score: {points}</div>\r\n            </div>\r\n            {\r\n                width <= 1024 && <div \r\n                className=\"snake-mobile-buttons\" \r\n                style={{width: dim, margin: 'auto'}}\r\n                >\r\n                <div>\r\n                    <button\r\n                        onClick={() => turn('up', 'down')}\r\n                        >&#8593;</button>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={() => turn('left', 'right')}\r\n                        >&#8592;</button>\r\n                    <button\r\n                        onClick={() => turn('right', 'left')}\r\n                        >&#8594;</button>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={() => turn('down', 'up')}\r\n                        >&#8595;</button>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Snake","import './App.css';\nimport Snake from './Snake/Snake'\nimport  Navbar  from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container'\n\n\nfunction App() {\n  \n  return (\n    < >\n     <Navbar bg=\"dark\" variant=\"dark\">\n    <Container>\n      <Navbar.Brand href=\"#home\">\n        <img\n          alt=\"\"\n          src=\"./snake_logo.png\"\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />{' '}\n     Snake Game\n      </Navbar.Brand>\n    </Container>\n  </Navbar>\n    <div className=\"App\">\n\n       <Snake \n        snakeColor=\"#248ec2\"\n        fruitColor=\"#1d355e\"\n        backgroundColor=\"#ebebeb\"\n        />\n    </div>\n    <div className=\"fixed-bottom\">  \n            <Navbar color=\"dark\" dark>\n                <Container>\n                    <Navbar.Brand>Made using React and bootstrap by Aatif Rashid</Navbar.Brand>\n                </Container>\n            </Navbar>\n        </div>\n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}